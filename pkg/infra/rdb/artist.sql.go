// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: artist.sql

package rdb

import (
	"context"
)

const createArtist = `-- name: CreateArtist :exec
INSERT INTO artist (quiz_manager_id, artist) VALUES (?1, ?2)
`

type CreateArtistParams struct {
	QuizManagerID string
	Artist        string
}

func (q *Queries) CreateArtist(ctx context.Context, arg CreateArtistParams) error {
	_, err := q.db.ExecContext(ctx, createArtist, arg.QuizManagerID, arg.Artist)
	return err
}

const deleteArtist = `-- name: DeleteArtist :exec
DELETE FROM artist WHERE quiz_manager_id = ?1
`

func (q *Queries) DeleteArtist(ctx context.Context, quizManagerID string) error {
	_, err := q.db.ExecContext(ctx, deleteArtist, quizManagerID)
	return err
}

const getArtist = `-- name: GetArtist :one
SELECT id, quiz_manager_id, artist FROM artist WHERE quiz_manager_id = ?1
`

func (q *Queries) GetArtist(ctx context.Context, quizManagerID string) (Artist, error) {
	row := q.db.QueryRowContext(ctx, getArtist, quizManagerID)
	var i Artist
	err := row.Scan(&i.ID, &i.QuizManagerID, &i.Artist)
	return i, err
}

const updateArtist = `-- name: UpdateArtist :exec
UPDATE artist SET artist = ?2 WHERE quiz_manager_id = ?1 returning id, quiz_manager_id, artist
`

type UpdateArtistParams struct {
	QuizManagerID string
	Artist        string
}

func (q *Queries) UpdateArtist(ctx context.Context, arg UpdateArtistParams) error {
	_, err := q.db.ExecContext(ctx, updateArtist, arg.QuizManagerID, arg.Artist)
	return err
}
