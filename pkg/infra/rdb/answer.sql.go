// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: answer.sql

package rdb

import (
	"context"
)

const createAnswer = `-- name: CreateAnswer :exec
INSERT INTO answer (quiz_manager_id, question_number, music_name) VALUES (?1, ?2, ?3)
`

type CreateAnswerParams struct {
	QuizManagerID  string
	QuestionNumber int64
	MusicName      string
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) error {
	_, err := q.db.ExecContext(ctx, createAnswer, arg.QuizManagerID, arg.QuestionNumber, arg.MusicName)
	return err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE FROM answer WHERE quiz_manager_id = ?1
`

func (q *Queries) DeleteAnswer(ctx context.Context, quizManagerID string) error {
	_, err := q.db.ExecContext(ctx, deleteAnswer, quizManagerID)
	return err
}

const getAnswer = `-- name: GetAnswer :one
SELECT id, quiz_manager_id, question_number, music_name FROM answer WHERE quiz_manager_id = ?1 AND question_number = ?2
`

type GetAnswerParams struct {
	QuizManagerID  string
	QuestionNumber int64
}

func (q *Queries) GetAnswer(ctx context.Context, arg GetAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, getAnswer, arg.QuizManagerID, arg.QuestionNumber)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.QuizManagerID,
		&i.QuestionNumber,
		&i.MusicName,
	)
	return i, err
}
