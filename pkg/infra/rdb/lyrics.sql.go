// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: lyrics.sql

package rdb

import (
	"context"
)

const createLyrics = `-- name: CreateLyrics :exec
INSERT INTO lyrics (quiz_manager_id, question_number, count, lyrics) VALUES (?1, ?2, ?3, ?4)
`

type CreateLyricsParams struct {
	QuizManagerID  string
	QuestionNumber int64
	Count          int64
	Lyrics         string
}

func (q *Queries) CreateLyrics(ctx context.Context, arg CreateLyricsParams) error {
	_, err := q.db.ExecContext(ctx, createLyrics,
		arg.QuizManagerID,
		arg.QuestionNumber,
		arg.Count,
		arg.Lyrics,
	)
	return err
}

const deleteLyrics = `-- name: DeleteLyrics :exec
DELETE FROM lyrics WHERE quiz_manager_id = ?1
`

func (q *Queries) DeleteLyrics(ctx context.Context, quizManagerID string) error {
	_, err := q.db.ExecContext(ctx, deleteLyrics, quizManagerID)
	return err
}

const getLyrics = `-- name: GetLyrics :one
SELECT id, quiz_manager_id, question_number, count, lyrics FROM lyrics WHERE quiz_manager_id = ?1 AND question_number = ?2 AND count = ?3
`

type GetLyricsParams struct {
	QuizManagerID  string
	QuestionNumber int64
	Count          int64
}

func (q *Queries) GetLyrics(ctx context.Context, arg GetLyricsParams) (Lyric, error) {
	row := q.db.QueryRowContext(ctx, getLyrics, arg.QuizManagerID, arg.QuestionNumber, arg.Count)
	var i Lyric
	err := row.Scan(
		&i.ID,
		&i.QuizManagerID,
		&i.QuestionNumber,
		&i.Count,
		&i.Lyrics,
	)
	return i, err
}
